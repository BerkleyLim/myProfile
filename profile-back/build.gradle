plugins {
	id 'org.springframework.boot' version '2.7.3'
  id 'io.spring.dependency-management' version '1.0.13.RELEASE'
  id 'java'
	id 'com.moowork.node' version '1.3.1'
}

group = 'profile.back'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'


// 임시로 주석 처리(배포시 해제)
/*
def frontendDir = "$projectDir/src/main/front"

sourceSets {
  main {
    resources { srcDirs = ["$projectDir/src/main/resources"]
    }
  }
}

processResources { dependsOn "copyReactBuildFiles" }

task installReact(type: Exec) {
  workingDir "$frontendDir"
  inputs.dir "$frontendDir"
  group = BasePlugin.BUILD_GROUP
  if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
    commandLine "npm.cmd", "audit", "fix"
    commandLine 'npm.cmd', 'install' }
  else {
    commandLine "npm", "audit", "fix" commandLine 'npm', 'install'
  }
}

task buildReact(type: Exec) {
  dependsOn "installReact"
  workingDir "$frontendDir"
  inputs.dir "$frontendDir"
  group = BasePlugin.BUILD_GROUP
  if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
    commandLine "npm.cmd", "run-script", "build"
  } else {
    commandLine "npm", "run-script", "build"
  }
}

task copyReactBuildFiles(type: Copy) {
  dependsOn "buildReact"
  from "$frontendDir/build"
  into "$projectDir/src/main/resources/static"
}


task runReactServer(type: NpmTask) {
    workingDir = file("$frontendDir");
    args = ["run", "start"]
}

bootRun.doFirst {
    runReactServer
}
*/
// 임시로 주석 처리 (배포시 해제)









/*
task runReactServer(type: NpmTask) {
    workingDir = file("front");
    args = ["run", "start"]
}
bootRun.doFirst {
    runReactServer
}
*/


// nGinX로 대처할것이기 때문에 스프링에서 동시에 실행시키지 않는다.
//def webappDir = "$projectDir/frontend/my-app"

/*
def webappDir = "front"

task appNpmInstall(type: NpmTask) {
    workingDir = file("${webappDir}")
    args = ["run", "build"]
}

task copyWebApp(type: Copy) {
    from 'front/build'
    into "build/resources/static"
}

copyWebApp.dependsOn(appNpmInstall)
compileJava.dependsOn(copyWebApp) 

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}
*/









repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	// implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	// implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.boot:spring-boot-devtools'
  implementation 'org.springframework.boot:spring-boot-starter-json' 
  // implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
  // implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.2'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'mysql:mysql-connector-java'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// https://blog.hyunsub.kim/Spring/Spring-JWTf/ 참조
    // https://github.com/dsunni/spring-boot-react-jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'  
} 

tasks.named('test') {
	useJUnitPlatform()
}
